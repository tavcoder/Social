| Ruta                                  | Método | Uso en la app                                             | Qué recibe el backend                                                                                | Qué devuelve el backend                                                                                                      | Notas                                                                                                 |                                         
| ------------------------------------- | ------ | --------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------   | --------------------------------------- 
| `/profile/:id`                        | GET    | Mostrar perfil de usuario y seguimiento                   | Params: `id`, Headers: `Authorization: Bearer <token>`                                               | `{ status: "success", user: <datos usuario>, following: [ids], follower: [ids] }`                                            | Muestra info de seguimiento                                                                           |                                         
| `/list/:page?`                        | GET    | Listar usuarios para explorar/buscar amigos               | Params opcional: `page`, Headers: `Authorization: Bearer <token>`                                    | `{ status: "success", users: [<usuarios>], page, itemsPerPage, total, pages, user_following: [ids], user_follow_me: [ids] }` | Paginación, seguimiento del usuario logueado                                                          |                                         
| `/avatar/:file`                       | GET    | Mostrar avatar de cualquier usuario                       | Params: `file`                                                                                       | Archivo de imagen (`res.sendFile(path)`)                                                                                     | No requiere autenticación                                                                             |                                         
| `/counters/:id?`                      | GET    | Mostrar estadísticas: following, followers, publicaciones | Params opcional: `id`, Headers: `Authorization: Bearer <token>`                                      | `{ userId, following: number, followed: number, publications: number }`                                                      | Si no se pasa `id`, devuelve stats del usuario logueado                                               |                                         
| `/list/:page?` (getUsers)             | GET    | Listar usuarios con paginación (sin contraseña)           | Params opcional: `page`, Headers: `Authorization: Bearer <token>`                                    | `{ status: "success", users: [<usuarios>], page, total, pages }`                                                             | Útil para exploración básica, paginada                                                                |                                         
| `/register`                           | POST   | Registro de usuario                                       | Body JSON: `{ name, surName, nick, email, password }`                                                | \`{ status: "success"                                                                                                        | "error", message: string, user?: <usuario sin password ni role> }\`                                   | Valida campos y duplicados              
| `/login`                              | POST   | Login y obtención de JWT                                  | Body JSON: `{ email, password }`                                                                     | \`{ status: "success"                                                                                                        | "error", message: string, user: {id, name, nick}, token: <JWT> }\`                                    | Devuelve token para rutas privadas      
| `/upload`                             | POST   | Subir avatar / actualizar imagen de perfil                | Headers: `Authorization: Bearer <token>`, FormData con campo `file0`                                 | \`{ status: "success"                                                                                                        | "error", user: <usuario actualizado>, file: <archivo subido> }\`                                      | Valida extensiones: png, jpg, jpeg, gif 
| `/update`                             | PUT    | Actualizar perfil del usuario logueado                    | Body JSON: `{ name?, surName?, nick?, email?, password? }`, Headers: `Authorization: Bearer <token>` | \`{ status: "success"                                                                                                        | "error", message: string, user: <usuario actualizado> }\`                                             | No permite actualizar `role` ni `image` 
| Ruta                                  | Método | Uso en la app                                             | Qué recibe el backend                                                                                | Qué devuelve el backend                                                                                                      | Notas                                                                                                 |                                                                     
| ------------------------------------- | ------ | --------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- 
| `/detail/:id`                         | GET    | Mostrar detalle de una publicación                        | Params: `id`, Headers: `Authorization: Bearer <token>`                                               | \`{ status: "success"                                                                                                        | "error", message: string, publication: \<objeto publicación> }\`                                      | Devuelve la publicación específica                                  
| `/user/:id/:page?`                    | GET    | Listar publicaciones de un usuario                        | Params: `id`, opcional `page`, Headers: `Authorization: Bearer <token>`                              | \`{ status: "success"                                                                                                        | "error", message: string, page, total, pages, publications: \[<publicaciones>] }\`                    | Paginación, publicaciones más recientes primero                     
| `/media/:file`                        | GET    | Mostrar archivo multimedia de publicación                 | Params: `file`                                                                                       | Archivo (`res.sendFile(path)`)                                                                                               | No requiere autenticación                                                                             |                                                                     
| `/feed/:page?`                        | GET    | Listar publicaciones de usuarios que sigo                 | Params opcional: `page`, Headers: `Authorization: Bearer <token>`                                    | \`{ status: "success"                                                                                                        | "error", message: string, following: \[ids], total, page, pages, publications: \[<publicaciones>] }\` | Paginado, orden cronológico descendente                             
| `/:id/comments`                       | GET    | Listar comentarios de publicación                         | Params: `id`, Headers: `Authorization: Bearer <token>`                                               | \`{ status: "success"                                                                                                        | "error", comments: \[<comentarios>] }\`                                                               | Incluye datos del usuario que comentó: `name, surname, nick, image` 
| `/save`                               | POST   | Crear nueva publicación                                   | Headers: `Authorization: Bearer <token>`<br>Body JSON: `{ text: string }`                            | \`{ status: "success"                                                                                                        | "error", message: string, publicationStored: \<objeto publicación> }\`                                | Guarda la publicación del usuario logueado                          
| `/upload/:id`                         | POST   | Subir archivo multimedia a publicación                    | Params: `id`, Headers: `Authorization: Bearer <token>`, FormData con `file0`                         | \`{ status: "success"                                                                                                        | "error", publication: \<publicación actualizada>, file: <archivo subido> }\`                          | Valida extensiones: png, jpg, jpeg, gif                             
| `/:id/like`                           | POST   | Dar o quitar like en publicación                          | Params: `id`, Headers: `Authorization: Bearer <token>`                                               | \`{ status: "success"                                                                                                        | "error", message: string, likesCount: number }\`                                                      | Toggle: si ya tiene like lo quita, si no lo agrega                  
| `/:id/comment`                        | POST   | Agregar comentario a publicación                          | Params: `id`, Headers: `Authorization: Bearer <token>`, Body JSON: `{ text: string }`                | \`{ status: "success"                                                                                                        | "error", message: string, comment: <objeto comentario> }\`                                            | Crea comentario con `user` y `created_at`                           
| `/remove/:id`                         | DELETE | Eliminar publicación propia                               | Params: `id`, Headers: `Authorization: Bearer <token>`                                               | \`{ status: "success"                                                                                                        | "error", message: string, publication: <id eliminado> }\`                                             | Solo el dueño puede eliminar                                        
| `/publication/:id/comment/:commentId` | DELETE | Eliminar comentario                                       | Params: `id`, `commentId`, Headers: `Authorization: Bearer <token>`                                  | \`{ status: "success"                                                                                                        | "error", message: string, publication: \<publicación actualizada> }\`                                 | Solo autor del comentario o dueño de publicación                    
| Ruta                                  | Método | Uso en la app                                             | Qué recibe el backend                                                                                | Qué devuelve el backend                                                                                                      | Notas                                                                                                 |                                                                     
| ------------------------------------- | ------ | --------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------- 
| `/following/:id?/:page?`              | GET    | Listar usuarios que un usuario está siguiendo             | Params id (opcional, usuario a consultar), page (opcional)<br>Headers: Authorization: Bearer <token> | `{ status: "success", message: string, follows: [<follows>], total, pages, user_following: [ids], user_follow_me: [ids] }`   | Si se provee :id, lista a quién sigue ese usuario. Si no, lista a quién sigue el usuario autenticado. |
| `/followers/:id?/:page?`              | GET    | Listar seguidores de un usuario                           | Params opcionales: `id` (usuario a consultar), `page`; Headers: `Authorization: Bearer <token>`      | `{ status: "success", message: string, follows: [<follows>], total, pages, user_following: [ids], user_follow_me: [ids] }`   | Si se provee :id, lista a quién sigue ese usuario. Si no, lista a quién sigue el usuario autenticado.                                   
| `/follow`                             | POST   | Seguir a un usuario                                       | Headers: `Authorization: Bearer <token>`<br>Body JSON: `{ followed: <idUsuario> }`                   | \`{ status: "success" |"error", identity: <usuario logueado>, follow: <objeto follow> }                                      | "error", identity: <usuario logueado>, follow: <objeto follow> }\`                                    | Valida que no se siga a sí mismo ni duplicados 
| `/unfollow/:id`                       | DELETE | Dejar de seguir a un usuario                              | Params: `id` (usuario a dejar de seguir), Headers: `Authorization: Bearer <token>`                   | \`{ status: "success" | "error", message: string }\`                                                                         | Solo elimina el follow existente                                                                      |
